**СТЕК**


package stack

import "errors"

type Stack[T any] struct {
	s    []T // слайс в котором хранятся значения в стеке
	head int // индекс головы стека
}

func NewStack[T any](size int) *Stack[T] {
	return &Stack[T]{
		s:    make([]T, size),
		head: -1,
	}
}

func (s *Stack[T]) Push(item T) error {
	if s.head == len(s.s)-1 {
		return errors.New("стек переполнен")
	}
	s.head++
	s.s[s.head] = item
	return nil
}

func (s *Stack[T]) Pop() (T, error) {
	if s.head == -1 {
		return nil, errors.New("стек пуст")
	}
	item := s.s[s.head]
	s.head--
	return item, nil
}

func (s *Stack[T]) Peek() (T, error) {
	if s.head == -1 {
		return nil, errors.New("стек пуст")
	}
	return s.s[s.head], nil
}

!!main!!


package main

import (
	"fmt"
	"github.com/yourusername/yourprojectname/stack"
)

func main() {
	s := stack.NewStack 

	s.Push(1)
	s.Push(2)
	s.Push(3)

	val, err := s.Peek()
	if err == nil {
		fmt.Println("Верхний элемент стека:", val)
	}

	item, err := s.Pop()
	if err == nil {
		fmt.Println("Извлеченный элемент из стека:", item)
	}
}


**ОЧЕРЕДЬ**


package queue

import "errors"

type Queue[T any] struct {
	s    []T // слайс в котором хранятся значения
	low  int // индекс нижней границы очереди
	high int // индекс верхней границы очереди
	size int // размер очереди
}

func NewQueue[T any](size int) *Queue[T] {
	return &Queue[T]{
		s:    make([]T, size),
		size: size,
		low:  -1,
		high: -1,
	}
}

func (q *Queue[T]) Push(v T) error {
	if q.high == q.size-1 {
		return errors.New("очередь переполнена")
	}
	if q.low == -1 {
		q.low = 0
	}
	q.high++
	q.s[q.high] = v
	return nil
}

func (q *Queue[T]) Pop() (T, error) {
	if q.low == -1 || q.low > q.high {
		return nil, errors.New("очередь пуста")
	}
	item := q.s[q.low]
	q.low++
	if q.low > q.high {
		q.low = -1
		q.high = -1
	}
	return item, nil
}


!!main!!

package main

import (
	"fmt"
	"github.com/yourusername/yourprojectname/queue"
)

func main() {
	q := queue.NewQueue 

	q.Push(1)
	q.Push(2)
	q.Push(3)

	val, err := q.Pop()
	if err == nil {
		fmt.Println("Извлеченный элемент из очереди:", val)
	}

	val, err = q.Pop()
	if err == nil {
		fmt.Println("Извлеченный элемент из очереди:", val)
	}
}




**БИНАРНОЕ ДЕРЕВО**


package tree

type Tree struct {
	Head *Node
}

type Node struct {
	Left, Right *Node
	Value       int
}

func NewTree() *Tree {
	return &Tree{}
}

func (t *Tree) Add(value int) {
	if t.Head == nil {
		t.Head = &Node{Value: value}
	} else {
		t.Head.AddNode(value)
	}
}

func (n *Node) AddNode(value int) {
	if value < n.Value {
		if n.Left == nil {
			n.Left = &Node{Value: value}
		} else {
			n.Left.AddNode(value)
		}
	} else {
		if n.Right == nil {
			n.Right = &Node{Value: value}
		} else {
			n.Right.AddNode(value)
		}
	}
}

func (t *Tree) Remove(value int) {
	t.Head = t.Head.RemoveNode(value)
}

func (n *Node) RemoveNode(value int) *Node {
	if n == nil {
		return nil
	}

	if value < n.Value {
		n.Left = n.Left.RemoveNode(value)
	} else if value > n.Value {
		n.Right = n.Right.RemoveNode(value)
	} else {
		if n.Left == nil {
			return n.Right
		} else if n.Right == nil {
			return n.Left
		}

		minRight := findMin(n.Right)
		n.Value = minRight.Value
		n.Right = n.Right.RemoveNode(minRight.Value)
	}

	return n
}

func findMin(n *Node) *Node {
	for n.Left != nil {
		n = n.Left
	}
	return n
}

func (t *Tree) Values() []int {
	var result []int
	inOrderTraversal(t.Head, &result)
	return result
}

func inOrderTraversal(n *Node, result *[]int) {
	if n != nil {
		inOrderTraversal(n.Left, result)
		*result = append(*result, n.Value)
		inOrderTraversal(n.Right, result)
	}
}


!!array/array.go!!

package array

import (
	"fmt"
	"math/rand"
	"time"
)

func FillWithUniqueNumbers(rows, cols int) [][]int {
	totalElements := rows * cols
	uniqueNumbers := generateUniqueNumbers(totalElements)
	array := make([][]int, rows)

	for i := range array {
		array[i] = make([]int, cols)
	}

	k := 0
	for i := 0; i < rows; i++ {
		for j := 0; j < cols; j++ {
			array[i][j] = uniqueNumbers[k]
			k++
		}
	}

	return array
}

func generateUniqueNumbers(n int) []int {
	numbers := make([]int, n)
	for i := 0; i < n; i++ {
		numbers[i] = i + 1
	}

	rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(numbers), func(i, j int) {
		numbers[i], numbers[j] = numbers[j], numbers[i]
	})

	return numbers
}

func main() {
	rows, cols := 3, 3
	array := FillWithUniqueNumbers(rows, cols)

	fmt.Println("Случайно заполненный двумерный массив:")
	for _, row := range array {
		fmt.Println(row)
	}
}




!!main.go!!

package main

import (
	"fmt"
	"github.com/yourusername/yourprojectname/tree"
	"github.com/yourusername/yourprojectname/array"
)

func main() {
	t := tree.NewTree()

	t.Add(5)
	t.Add(3)
	t.Add(7)
	t.Add(2)
	t.Add(4)

	fmt.Println("Значения в дереве:", t.Values()) // Должно вывести: [2 3 4 5 7]

	t.Remove(3)

	fmt.Println("Значения в дереве после удаления:", t.Values()) // Должно вывести: [2 4 5 7]

	rows, cols := 3, 3
	arr := array.FillWithUniqueNumbers(rows, cols)

	fmt.Println("Случайно заполненный двумерный массив:")
	for _, row := range arr {
		fmt.Println(row)
	}
}
